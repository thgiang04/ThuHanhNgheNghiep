const Exam = require("../model/examModel.js");
const Question = require("../model/questionModel.js");
const Result = require("../model/resultModel.js"); // Th√™m model result
const User = require("../model/userModel.js"); // üõ† Th√™m d√≤ng n√†y n·∫øu ch∆∞a c√≥
const mongoose = require("mongoose");

exports.createExam = async (req, res) => {
  try {
    const { title, startTime, endTime, duration, teacherId } = req.body;
    const code = Math.random().toString(36).substring(2, 8).toUpperCase();

    const newExam = new Exam({ title, code, startTime, endTime, duration, teacherId });
    await newExam.save();

    res.status(201).json(newExam); // Tr·∫£ v·ªÅ ID ƒë·ªÉ frontend t·∫°o c√¢u h·ªèi
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.submitExamResults = async (req, res) => {
  try {
    const {  userId, examId, score, timeSpent } = req.body;

    // L·∫•y th√¥ng tin h·ªçc sinh t·ª´ b·∫£ng Users
    const user = await User.findById(userId);

    // T·∫°o k·∫øt qu·∫£ b√†i ki·ªÉm tra m·ªõi
    const newResult = new Result({
      name: user.name, // L·∫•y t√™n t·ª´ b·∫£ng Users
      userId, // L∆∞u ID h·ªçc sinh
      examId,
      score,
      timeSpent,
    });

    // L∆∞u k·∫øt qu·∫£ v√†o database
    await newResult.save();

    // C·∫≠p nh·∫≠t l·∫°i m·∫£ng `results` trong Exam
    const exam = await Exam.findById(examId);
    exam.results.push(newResult._id);
    exam.studentsCompleted.push(userId); // Th√™m h·ªçc sinh v√†o m·∫£ng ƒë√£ ho√†n th√†nh

    // L∆∞u l·∫°i Exam sau khi ƒë√£ th√™m k·∫øt qu·∫£ v√† h·ªçc sinh v√†o
    await exam.save();

    res.status(201).json({ message: "K·∫øt qu·∫£ b√†i ki·ªÉm tra ƒë√£ ƒë∆∞·ª£c l∆∞u." });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};



exports.getExamByCode = async (req, res) => {
  try {
    const userId = req.query.userId;
    const exam = await Exam.findOne({ code: req.params.code }).populate("questions");
    if (!exam) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i ki·ªÉm tra." });
    }

    if (!userId || !mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ message: "userId kh√¥ng h·ª£p l·ªá" });
    }

    const objectUserId = new mongoose.Types.ObjectId(userId);

    const isCompleted = exam.studentsCompleted.some(id => id.equals(objectUserId));

    res.status(200).json({ exam, isCompleted });
  } catch (err) {
    console.error("L·ªói trong getExamByCode:", err);
    res.status(500).json({ message: err.message });
  }
};


exports.addQuestionToExam = async (req, res) => {
  try {
    const { examId } = req.params;
    const { content, options, correctAnswer, score } = req.body;

    const exam = await Exam.findById(examId);
    if (!exam) {
      return res.status(404).json({ message: "Exam not found" });
    }

    const question = new Question({
      examId,
      content,
      options,
      correctAnswer,
      score,
    });
    await question.save();

    exam.questions.push(question._id);
    await exam.save();

    res.status(201).json(question);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.getExamById = async (req, res) => {
  try {
    const exam = await Exam.findById(req.params.examId)
      .populate("questions")
      .populate("results");
    res.status(200).json(exam);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.getAllExams = async (req, res) => {
  try {
    const teacherId = req.query.teacherId; 

    if (!teacherId) {
      return res.status(400).json({ message: "teacherId is required" });
    }

    const exams = await Exam.find({ teacherId });  // L·ªçc theo teacherId
    res.status(200).json(exams);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};


exports.deleteExam = async (req, res) => {
  try {
    const { examId } = req.params;
    await Exam.findByIdAndDelete(examId); // Xo√° ƒë·ªÅ
    await Question.deleteMany({ examId }); // Xo√° c√¢u h·ªèi thu·ªôc ƒë·ªÅ

    res.status(200).json({ message: "X√≥a b√†i ki·ªÉm tra th√†nh c√¥ng." });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};
